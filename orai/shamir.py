import random
from functools import reduce
from operator import mul

# Polinom gener√°l√°sa adott k√ºsz√∂b√©rt√©kkel (k fok√∫ polinom)
# A polinom els≈ë tagja maga a titok, a t√∂bbi v√©letlenszer≈± egy√ºtthat√≥
def polinom_gener√°l√°s(titok, k√ºsz√∂b√©rt√©k, prime):
    # A titok a polinom els≈ë tagja, a t√∂bbi egy√ºtthat√≥ v√©letlen
    egy√ºtthat√≥k = [titok] + [random.randint(0, prime - 1) for _ in range(k√ºsz√∂b√©rt√©k - 1)]
    return egy√ºtthat√≥k

# Titokr√©szek gener√°l√°sa a polinom alapj√°n
# A r√©szes felek sz√°ma (n) meghat√°rozza, hogy h√°ny r√©sz k√©sz√ºlj√∂n
def titok_reszek_gener√°l√°s(polinom, n, prime):
    r√©szek = []
    # Minden r√©szes f√©l kap egy (x, y) p√°rt, ahol x az adott f√©l indexe,
    # y pedig a polinom √©rt√©ke az adott x-n√©l
    for x in range(1, n + 1):
        # Polinom √©rt√©ke az adott x-n√©l: P(x) = a0 + a1*x + a2*x^2 + ... mod prime
        √©rt√©k = sum([polinom[i] * (x ** i) for i in range(len(polinom))]) % prime
        r√©szek.append((x, √©rt√©k))  # T√°roljuk az (x, P(x)) p√°rt
    return r√©szek

# Lagrange interpol√°ci√≥ a titok vissza√°ll√≠t√°s√°hoz
# Ehhez legal√°bb k titokr√©sz kell, hogy rekonstru√°lni tudjuk a polinomot
def lagrange_interpol√°ci√≥(r√©szek, prime):
    titok = 0
    # Minden titokr√©sz (xi, yi) alapj√°n sz√°m√≠tunk egy interpol√°ci√≥s tagot
    for i, (xi, yi) in enumerate(r√©szek):
        li = 1
        for j, (xj, _) in enumerate(r√©szek):
            if i != j:
                # Lagrange interpol√°ci√≥s tag: li = Œ† (xj * (xj - xi)^(-1)) mod prime
                # Pow haszn√°lat√°val sz√°m√≠tjuk az inverz m≈±veletet modul√≥ szerint
                li *= (xj * pow(xj - xi, -1, prime)) % prime
        # Hozz√°adjuk az aktu√°lis tagot a titokhoz
        titok = (titok + yi * li) % prime
    return titok

# P√©lda haszn√°lat
prime = 2087  # Egy nagy pr√≠msz√°m, ami biztos√≠tja a modul√°ris aritmetika helyes m≈±k√∂d√©s√©t
titok = 1234  # A titok, amit meg szeretn√©nk osztani
n = 5         # A r√©szes felek sz√°ma (akik megkapj√°k a titokr√©szeket)
k = 3         # A k√ºsz√∂b√©rt√©k: ennyi r√©szt kell kombin√°lni a titok visszanyer√©s√©hez

# 1. Polinom gener√°l√°sa: a titok √©s a v√©letlenszer≈± egy√ºtthat√≥k
polinom = polinom_gener√°l√°s(titok, k, prime)
print("Gener√°lt polinom egy√ºtthat√≥k:", polinom)

# 2. Titokr√©szek gener√°l√°sa: n darab (x, P(x)) p√°r
r√©szek = titok_reszek_gener√°l√°s(polinom, n, prime)
print("Gener√°lt titokr√©szek:", r√©szek)

# 3. Titok vissza√°ll√≠t√°sa k darab titokr√©szb≈ël (Lagrange interpol√°ci√≥val)
k_r√©sz = r√©szek[:k]  # Az els≈ë k r√©szt haszn√°ljuk a vissza√°ll√≠t√°shoz
vissza√°ll√≠tott_titok = lagrange_interpol√°ci√≥(k_r√©sz, prime)
print("Vissza√°ll√≠tott titok:", vissza√°ll√≠tott_titok)

# Egy√©b magyar√°zat:
# 1. Polinom gener√°l√°sa:
# - A titok az √°lland√≥ tag (a polinom els≈ë egy√ºtthat√≥ja), a t√∂bbi v√©letlenszer≈±en gener√°lt egy√ºtthat√≥.
# - Ez lesz a polinom, amely alapj√°n a titokr√©szeket gener√°ljuk.
# 2. Titokr√©szek gener√°l√°sa:
# - A r√©sztvev≈ëk mind kapnak egy-egy titokr√©szt, ami egy ùë• √©rt√©khez tartoz√≥ ùëÉ(x) pont.
# - Ezeket a pontokat k√©s≈ëbb fel lehet haszn√°lni a polinom rekonstru√°l√°s√°ra, √©s ez√°ltal a titok visszanyer√©s√©re.
# 3. Lagrange interpol√°ci√≥:
# - Ez a r√©sz a polinom rekonstru√°l√°s√°√©rt felel. Legal√°bb k sz√°m√∫ r√©szb≈ël vissza lehet nyerni az eredeti titkot.
# - A Lagrange-interpol√°ci√≥s m√≥dszerrel egy polinomot illeszt√ºnk a megadott pontokra.
# 4. Modul√°ris inverz:
# - A pow(xj - xi, -1, prime) kifejez√©s seg√≠ts√©g√©vel sz√°m√≠tjuk az inverz m≈±veletet egy modul√°ris mez≈ëben, ami kulcsfontoss√°g√∫ a helyes sz√°m√≠t√°sokhoz.